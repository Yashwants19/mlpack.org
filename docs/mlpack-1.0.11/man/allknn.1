.\"Text automatically generated by txt2man
.TH allknn  "1" "" ""
.SH NAME
\fBallknn \fP- all k-nearest-neighbors
.SH SYNOPSIS
.nf
.fam C
 \fBallknn\fP [\fB-h\fP] [\fB-v\fP] \fB-d\fP \fIstring\fP \fB-k\fP \fIint\fP \fB-n\fP \fIstring\fP \fB-r\fP \fIstring\fP [\fB-c\fP] [\fB-l\fP \fIint\fP] [\fB-N\fP] [\fB-q\fP \fIstring\fP] [\fB-R\fP] [\fB-s\fP \fIint\fP] [\fB-S\fP] \fB-V\fP 
.fam T
.fi
.fam T
.fi
.SH DESCRIPTION


This program will calculate the all k-nearest-neighbors of a set of points
using kd-trees or cover trees (cover tree support is experimental and may be
slow). You may specify a separate set of reference points and query points, or
just a reference set which will be used as both the reference and query set.
.PP
For example, the following will calculate the 5 nearest neighbors of eachpoint
in 'input.csv' and store the distances in 'distances.csv' and the neighbors in
the file 'neighbors.csv':
.PP
$ \fBallknn\fP \fB--k\fP=5 \fB--reference_file\fP=input.csv \fB--distances_file\fP=distances.csv
\fB--neighbors_file\fP=neighbors.csv
.PP
The output files are organized such that row i and column j in the neighbors
output file corresponds to the index of the point in the reference set which
is the i'th nearest neighbor from the point in the query set with index j. 
Row i and column j in the distances output file corresponds to the distance
between those two points.
.SH REQUIRED OPTIONS 

.TP
.B
\fB--distances_file\fP (\fB-d\fP) [\fIstring\fP]
File to output distances into. 
.TP
.B
\fB--k\fP (\fB-k\fP) [\fIint\fP]
Number of nearest neighbors to find. 
.TP
.B
\fB--neighbors_file\fP (\fB-n\fP) [\fIstring\fP]
File to output neighbors into. 
.TP
.B
\fB--reference_file\fP (\fB-r\fP) [\fIstring\fP]
File containing the reference dataset.  
.SH OPTIONS 

.TP
.B
\fB--cover_tree\fP (\fB-c\fP)
If true, use cover trees to perform the search (experimental, may be slow). 
.TP
.B
\fB--help\fP (\fB-h\fP)
Default help info. 
.TP
.B
\fB--info\fP [\fIstring\fP]
Get help on a specific module or option.  Default value ''. 
.TP
.B
\fB--leaf_size\fP (\fB-l\fP) [\fIint\fP]
Leaf size for tree building. Default value 20. 
.TP
.B
\fB--naive\fP (\fB-N\fP)
If true, \fBO\fP(n^2) naive mode is used for computation. 
.TP
.B
\fB--query_file\fP (\fB-q\fP) [\fIstring\fP]
File containing query points (optional).  Default value ''. 
.TP
.B
\fB--random_basis\fP (\fB-R\fP)
Before tree-building, project the data onto a random orthogonal basis. 
.TP
.B
\fB--seed\fP (\fB-s\fP) [\fIint\fP]
Random seed (if 0, \fBstd::time\fP(NULL) is used).  Default value 0. 
.TP
.B
\fB--single_mode\fP (\fB-S\fP)
If true, single-tree search is used (as opposed to dual-tree search). 
.TP
.B
\fB--verbose\fP (\fB-v\fP)
Display informational messages and the full list of parameters and timers at the end of execution. 
.TP
.B
\fB--version\fP (\fB-V\fP)
Display the version of mlpack.
.SH ADDITIONAL INFORMATION

For further information, including relevant papers, citations, and theory,
consult the documentation found at http://www.mlpack.org or included with your
distribution of MLPACK.
